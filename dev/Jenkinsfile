// petclinic-build dev or main
pipeline {

    parameters {
       choice(name: "environment_project", choices: ["dev", "main"], description: "Environment dir to use for deployment")
       choice(name: "environment_code", choices: ["dev", "main"], description: "Environment dir to use for deployment")
    }
   environment {
    JAVA_HOME='/opt/jdk-19.0.2'
   }
   agent  { label 'maven' }
   tools {  maven 'mvn'   }
        options {
                timestamps ()
            }
    stages {
        stage('Git checkout petclinic source') {
            steps {
                 script{
                        echo '=== start Git chekout petclinic source ==='
                        dir("petclinic")
                        {
                            git branch: '${environment_code}', credentialsId: 'jenkis-git-key', url: 'git@github.com:WladimirRogovenko/petclinic.git'
                        }
                        echo '=== end Git chekout petclinic source ==='
                    }
                }
            }
        stage('Biild number stemp') {
            steps {
            sh 'echo "Pipeline source: GitURL ${GIT_URL} Branch name ${GIT_BRANCH}  \n" >> petclinic/src/main/resources/templates/welcome.html'
            sh 'echo "Code source: WladimirRogovenko/petclinic.git  Branch name ${environment_code} Build # ${BUILD_NUMBER} Date: `date`" >> petclinic/src/main/resources/templates/welcome.html'
            }
        }
        stage ('Tests') {
            steps {
                script {
                    echo '=== start test petclinic  ==='
                    sh "pwd;cd petclinic; pwd; mvn clean test surefire-report:report"
                    echo '=== end test petclinic  ==='
                }
              echo '=== end tests stage===='  
            }
        }
        stage('Build') {
            steps {
                script {
                    echo '=== start build petclinic  ==='
                    sh 'whereis mvn'
                    echo 'local version mvn'
                    sh 'mvn --version'
                    sh "pwd;cd petclinic; pwd; mvn package"
                    echo '=== end build petclinic ==='
                }
               }
            }

        stage ('Archive') {
            steps {
              echo '=== start archiving artifacts petclinic  ==='
              //archiveArtifacts artifacts: 'petclinic/target/*.jar', followSymlinks: false  
              archiveArtifacts artifacts: '**/target/*.jar', followSymlinks: false, fingerprint: false
              withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 's3-artifact_storage_petclinic', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    // copy LAST archive to /last_build/ (and replace if exists)
                    sh "aws s3 cp petclinic/target/*.jar s3://p-petclinic2023-jenkins-archive-artifacts/last_build/ "
                } 
              echo '=== end archiving artifacts petclinic  ==='
            }
        }
        /*
        stage('Run') {
            steps {
               script {
                echo '=== start run petclinic  ===' 
                echo 'java version'
                sh 'java --version'
                echo "$JAVA_HOME/bin java version"
                sh "$JAVA_HOME/bin/java --version"
                sh "pwd;cd petclinic; pwd; $JAVA_HOME/bin/java -jar target/*.jar --server.port=8081" 
                echo '=== end run petclinic ==='
                //sleep(60)
                }
               }
            }
        */            
        }
    }